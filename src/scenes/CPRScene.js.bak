import { AudioGenerator } from '../utils/audioGenerator';
import { Background } from './Background';

export default class CPRScene extends Phaser.Scene {
    constructor() {
        super({ key: 'CPRScene' });
        this.compressionCount = 0;
        this.breathCount = 0;
        this.currentPhase = 'check'; // check, call, airway, compression, breath
        this.lastCompressionTime = 0;
        this.compressionRate = 0;
        this.compressionDepth = 0;
        this.audioContext = null;
        this.isGameOver = false;
        this.score = 0;
    }

    preload() {
        // 加载场景特定资源
        this.load.image('patient', 'assets/images/patient.svg');
        this.load.image('hands', 'assets/images/hands.svg');
        
        // 加载音效
        this.load.audio('select', 'assets/audio/select.mp3');
        this.load.audio('success', 'assets/audio/success.mp3');
        this.load.audio('error', 'assets/audio/error.mp3');
        this.load.audio('metronome', 'assets/audio/metronome.mp3');
    }

    create() {
        // 设置游戏画面缩放
        this.scale.setGameSize(window.innerWidth, window.innerHeight);
        this.scale.resize(window.innerWidth, window.innerHeight);
        this.scale.setParentSize(window.innerWidth, window.innerHeight);
        
        // 创建场景元素
        this.background = new Background(this);
        this.createPatient();
        this.createUI();
        this.setupInput();
        this.setupAudio();

        // 添加窗口大小变化监听
        window.addEventListener('resize', () => {
            this.scale.resize(window.innerWidth, window.innerHeight);
            this.scale.setParentSize(window.innerWidth, window.innerHeight);
            this.updateLayout();
        });
    }

    createBackground() {
        // 创建渐变背景
        const gradient = this.add.graphics();
        gradient.fillGradientStyle(0x87CEEB, 0x87CEEB, 0x4A90E2, 0x4A90E2);
        gradient.fillRect(0, 0, window.innerWidth, window.innerHeight);
        
        // 添加地面
        const ground = this.add.rectangle(0, window.innerHeight - 100, window.innerWidth, 100, 0x228B22);
        
        // 添加草地纹理
        const grass = this.add.graphics();
        grass.lineStyle(2, 0x1B5E20);
        
        // 增加草地密度
        for (let i = 0; i < 200; i++) {
            const x = Math.random() * window.innerWidth;
            const y = window.innerHeight - 100 + Math.random() * 100;
            const height = 10 + Math.random() * 30;
            const angle = -10 + Math.random() * 20; // 添加随机角度
            
            // 计算旋转后的终点坐标
            const rad = angle * Math.PI / 180;
            const endX = x + Math.sin(rad) * height;
            const endY = y - Math.cos(rad) * height;
            
            grass.moveTo(x, y);
            grass.lineTo(endX, endY);
        }
        
        // 添加草地阴影
        const grassShadow = this.add.graphics();
        grassShadow.lineStyle(1, 0x1B5E20, 0.3);
        for (let i = 0; i < 100; i++) {
            const x = Math.random() * window.innerWidth;
            const y = window.innerHeight - 100 + Math.random() * 100;
            const length = 5 + Math.random() * 10;
            
            grassShadow.moveTo(x, y);
            grassShadow.lineTo(x + length, y);
        }
        
        // 添加草地装饰
        const grassDecor = this.add.graphics();
        // 添加小花朵
        for (let i = 0; i < 50; i++) {
            const x = Math.random() * window.innerWidth;
            const y = window.innerHeight - 100 + Math.random() * 100;
            
            // 花瓣
            grassDecor.fillStyle(0xFF69B4, 0.8);
            for (let j = 0; j < 4; j++) {
                const angle = (j / 4) * Math.PI * 2;
                grassDecor.fillCircle(
                    x + Math.cos(angle) * 3,
                    y + Math.sin(angle) * 3,
                    2
                );
            }
            // 花心
            grassDecor.fillStyle(0xFFFF00, 0.8);
            grassDecor.fillCircle(x, y, 1);
        }
        
        // 添加小石头
        for (let i = 0; i < 30; i++) {
            const x = Math.random() * window.innerWidth;
            const y = window.innerHeight - 100 + Math.random() * 100;
            const size = 2 + Math.random() * 4;
            
            grassDecor.fillStyle(0x808080, 0.8);
            grassDecor.fillCircle(x, y, size);
        }
        
        // 添加草地纹理
        const grassTexture = this.add.graphics();
        grassTexture.fillStyle(0x1B5E20, 0.1);
        for (let i = 0; i < 100; i++) {
            const x = Math.random() * window.innerWidth;
            const y = window.innerHeight - 100 + Math.random() * 100;
            const size = 5 + Math.random() * 10;
            
            grassTexture.fillCircle(x, y, size);
        }
        
        // 添加草地边缘渐变
        const grassEdge = this.add.graphics();
        grassEdge.fillGradientStyle(0x228B22, 0x228B22, 0x1B5E20, 0x1B5E20);
        grassEdge.fillRect(0, window.innerHeight - 120, window.innerWidth, 20);
        
        // 添加装饰性云朵
        for (let i = 0; i < 5; i++) {
            const cloud = this.add.graphics();
            cloud.fillStyle(0xFFFFFF, 0.8);
            
            // 创建多层云朵
            for (let j = 0; j < 3; j++) {
                cloud.fillCircle(
                    100 + i * 150 + j * 20,
                    100 + i * 50,
                    20 + j * 5
                );
            }
            
            // 添加云朵移动动画
            this.tweens.add({
                targets: cloud,
                x: cloud.x + 50,
                duration: 3000 + i * 1000,
                yoyo: true,
                repeat: -1,
                ease: 'Sine.easeInOut'
            });
        }

        // 添加背景粒子效果
        for (let i = 0; i < 50; i++) {
            const particle = this.add.circle(
                Math.random() * window.innerWidth,
                Math.random() * window.innerHeight,
                2,
                0xFFFFFF
            );
            particle.setAlpha(0.3);
            
            this.tweens.add({
                targets: particle,
                y: particle.y - 100,
                alpha: 0,
                duration: 2000 + Math.random() * 2000,
                ease: 'Linear',
                onComplete: () => {
                    particle.setPosition(
                        Math.random() * window.innerWidth,
                        window.innerHeight
                    );
                    particle.setAlpha(0.3);
                },
                repeat: -1
            });
        }

        // 添加装饰性树木
        for (let i = 0; i < 3; i++) {
            const tree = this.add.graphics();
            // 树干
            tree.fillStyle(0x8B4513);
            tree.fillRect(100 + i * 200, window.innerHeight - 150, 20, 50);
            // 树冠
            tree.fillStyle(0x228B22);
            tree.fillTriangle(
                90 + i * 200, window.innerHeight - 150,
                110 + i * 200, window.innerHeight - 150,
                100 + i * 200, window.innerHeight - 200
            );
        }

        // 添加装饰性花朵
        for (let i = 0; i < 20; i++) {
            const flower = this.add.graphics();
            const x = Math.random() * window.innerWidth;
            const y = window.innerHeight - 100 + Math.random() * 50;
            
            // 花瓣
            flower.fillStyle(0xFF69B4);
            for (let j = 0; j < 5; j++) {
                const angle = (j / 5) * Math.PI * 2;
                flower.fillCircle(
                    x + Math.cos(angle) * 5,
                    y + Math.sin(angle) * 5,
                    3
                );
            }
            // 花心
            flower.fillStyle(0xFFFF00);
            flower.fillCircle(x, y, 2);
        }

        // 添加装饰性蝴蝶
        for (let i = 0; i < 3; i++) {
            const butterfly = this.add.graphics();
            const x = Math.random() * window.innerWidth;
            const y = Math.random() * (window.innerHeight / 2);
            
            // 蝴蝶翅膀
            butterfly.fillStyle(0xFFD700);
            butterfly.fillEllipse(x, y, 20, 10);
            
            // 添加蝴蝶飞舞动画
            this.tweens.add({
                targets: butterfly,
                x: butterfly.x + 50,
                y: butterfly.y + Math.sin(butterfly.x / 50) * 20,
                duration: 2000 + i * 1000,
                yoyo: true,
                repeat: -1,
                ease: 'Sine.easeInOut'
            });
        }

        // 添加装饰性小鸟
        for (let i = 0; i < 2; i++) {
            const bird = this.add.graphics();
            const x = Math.random() * window.innerWidth;
            const y = Math.random() * (window.innerHeight / 3);
            
            // 小鸟身体
            bird.fillStyle(0x000000);
            bird.fillEllipse(x, y, 15, 8);
            
            // 小鸟翅膀
            bird.fillStyle(0x000000);
            bird.fillTriangle(
                x - 5, y,
                x + 5, y,
                x, y - 5
            );
            
            // 添加小鸟飞行动画
            this.tweens.add({
                targets: bird,
                x: bird.x + 100,
                y: bird.y + Math.sin(bird.x / 50) * 10,
                duration: 3000 + i * 1000,
                yoyo: true,
                repeat: -1,
                ease: 'Sine.easeInOut'
            });
        }
    }

    createPatient() {
        // 创建病人模型
        const patientGroup = this.add.container(window.innerWidth / 2, window.innerHeight / 2);
        
        // 创建头部（像素风格）
        const head = this.add.rectangle(0, -80, 70, 70, 0xFFE4C4);
        head.setOrigin(0.5, 0.5);
        patientGroup.add(head);
        
        // 创建面部特征（像素风格）
        const face = this.add.graphics();
        face.lineStyle(4, 0x000000);
        
        // 眼睛（像素风格）
        this.leftEye = face.fillRect(-20, -90, 12, 12);
        this.rightEye = face.fillRect(8, -90, 12, 12);
        
        // 眉毛（像素风格）
        face.fillRect(-24, -98, 16, 4);
        face.fillRect(8, -98, 16, 4);
        
        // 鼻子（像素风格）
        face.fillRect(-2, -85, 4, 10);
        
        // 嘴巴（像素风格）
        this.mouth = face.fillRect(-12, -65, 24, 4);
        
        patientGroup.add(face);
        
        // 创建头发（像素风格）
        const hair = this.add.graphics();
        hair.fillStyle(0x000000);
        // 绘制发际线
        hair.fillRect(-35, -115, 70, 10);
        // 绘制头发纹理
        for (let i = 0; i < 8; i++) {
            hair.fillRect(-35 + i * 10, -125, 8, 20);
        }
        patientGroup.add(hair);
        
        // 创建颈部（像素风格）
        const neck = this.add.rectangle(0, -45, 30, 20, 0xFFE4C4);
        patientGroup.add(neck);
        
        // 创建身体（像素风格）
        const body = this.add.rectangle(0, 0, 60, 100, 0x4169E1);
        patientGroup.add(body);
        
        // 创建衣服细节（像素风格）
        const clothes = this.add.graphics();
        clothes.fillStyle(0x000000);
        // 领口
        clothes.fillRect(-20, -40, 40, 4);
        // 纽扣
        for (let i = 0; i < 3; i++) {
            clothes.fillRect(-2, -20 + i * 25, 4, 4);
        }
        // 衣服褶皱
        for (let i = 0; i < 3; i++) {
            clothes.fillRect(-25, -30 + i * 25, 50, 2);
        }
        patientGroup.add(clothes);
        
        // 创建手臂（像素风格）
        const leftArm = this.add.rectangle(-35, -15, 20, 70, 0x4169E1);
        leftArm.setOrigin(0.5, 0);
        patientGroup.add(leftArm);
        
        const rightArm = this.add.rectangle(35, -15, 20, 70, 0x4169E1);
        rightArm.setOrigin(0.5, 0);
        patientGroup.add(rightArm);
        
        // 创建手部（像素风格）
        const leftHand = this.add.rectangle(-35, 55, 20, 20, 0xFFE4C4);
        leftHand.setOrigin(0.5, 0.5);
        patientGroup.add(leftHand);
        
        const rightHand = this.add.rectangle(35, 55, 20, 20, 0xFFE4C4);
        rightHand.setOrigin(0.5, 0.5);
        patientGroup.add(rightHand);
        
        // 创建腿部（像素风格）
        const leftLeg = this.add.rectangle(-12, 100, 20, 80, 0x4169E1);
        leftLeg.setOrigin(0.5, 0);
        patientGroup.add(leftLeg);
        
        const rightLeg = this.add.rectangle(12, 100, 20, 80, 0x4169E1);
        rightLeg.setOrigin(0.5, 0);
        patientGroup.add(rightLeg);
        
        // 创建脚部（像素风格）
        const leftFoot = this.add.rectangle(-12, 180, 24, 12, 0x000000);
        leftFoot.setOrigin(0.5, 0);
        patientGroup.add(leftFoot);
        
        const rightFoot = this.add.rectangle(12, 180, 24, 12, 0x000000);
        rightFoot.setOrigin(0.5, 0);
        patientGroup.add(rightFoot);
        
        // 创建按压区域指示器（像素风格）
        this.compressionArea = this.add.rectangle(0, 0, 50, 50, 0xff0000, 0.3);
        this.compressionArea.setOrigin(0.5, 0.5);
        this.compressionArea.setAlpha(0);
        patientGroup.add(this.compressionArea);
        
        // 创建手部指示器（像素风格）
        this.hands = this.add.rectangle(0, 0, 30, 30, 0xFFFFFF);
        this.hands.setOrigin(0.5, 0.5);
        this.hands.setAlpha(0);
        patientGroup.add(this.hands);
        
        // 保存病人模型引用
        this.patient = patientGroup;
        this.patient.setScale(1.2);
        
        // 添加阴影效果（像素风格）
        const shadow = this.add.rectangle(0, 200, 80, 15, 0x000000, 0.3);
        patientGroup.add(shadow);
        
        // 保存面部特征引用
        this.faceFeatures = {
            leftEye: this.leftEye,
            rightEye: this.rightEye,
            mouth: this.mouth
        };
    }

    createUI() {
        // 创建半透明背景面板（像素风格）
        const panel = this.add.rectangle(window.innerWidth - 100, window.innerHeight / 2, 200, window.innerHeight - 100, 0x000000, 0.7);
        panel.setOrigin(0.5, 0.5);
        
        // 创建按压频率指示器
        this.rateText = this.add.text(20, 20, '按压频率: 0/分钟', {
            fontSize: '6rem',
            fill: '#FFFFFF',
            backgroundColor: '#000000',
            padding: { x: 40, y: 30 },
            fontFamily: 'Press Start 2P',
            stroke: '#000000',
            strokeThickness: 12
        });
        
        // 创建阶段提示
        this.phaseText = this.add.text(window.innerWidth / 2, 100, '检查意识', {
            fontSize: '4rem',
            fill: '#FFFFFF',
            backgroundColor: '#000000',
            padding: { x: 40, y: 20 },
            fontFamily: 'Press Start 2P',
            stroke: '#000000',
            strokeThickness: 8
        }).setOrigin(0.5, 0);
        
        // 添加按压计数
        this.countText = this.add.text(20, 200, '按压次数: 0/30', {
            fontSize: '3rem',
            fill: '#FFFFFF',
            backgroundColor: '#000000',
            padding: { x: 20, y: 15 },
            fontFamily: 'Press Start 2P',
            stroke: '#000000',
            strokeThickness: 8
        });

        // 添加分数显示
        this.scoreText = this.add.text(20, 300, '得分: 0', {
            fontSize: '3rem',
            fill: '#FFFFFF',
            backgroundColor: '#000000',
            padding: { x: 20, y: 15 },
            fontFamily: 'Press Start 2P',
            stroke: '#000000',
            strokeThickness: 8
        });

        // 添加重置按钮
        this.resetButton = this.add.text(window.innerWidth - 100, 50, '重新开始', {
            fontSize: '2.75rem',
            fill: '#FFFFFF',
            backgroundColor: '#000000',
            padding: { x: 20, y: 15 },
            fontFamily: 'Press Start 2P',
            stroke: '#000000',
            strokeThickness: 8
        })
        .setOrigin(0.5, 0.5)
        .setInteractive()
        .setAlpha(0);

        this.resetButton.on('pointerdown', () => {
            this.resetGame();
        });

        // 添加教程按钮
        this.tutorialButton = this.add.text(window.innerWidth - 100, 100, '操作说明', {
            fontSize: '2.75rem',
            fill: '#FFFFFF',
            backgroundColor: '#000000',
            padding: { x: 20, y: 15 },
            fontFamily: 'Press Start 2P',
            stroke: '#000000',
            strokeThickness: 8
        })
        .setOrigin(0.5, 0.5)
        .setInteractive();

        this.tutorialButton.on('pointerdown', () => {
            this.showTutorial();
        });

        // 创建选项容器
        this.optionsContainer = this.add.container(window.innerWidth / 2, window.innerHeight / 2);
        this.optionsContainer.setAlpha(0);
    }

    showTutorial() {
        // 创建半透明背景（像素风格）
        const overlay = this.add.rectangle(window.innerWidth / 2, window.innerHeight / 2, window.innerWidth, window.innerHeight, 0x000000, 0.9);
        
        // 创建教程文本（像素风格）
        const tutorialText = [
            'CPR操作指南：',
            '1. 检查意识：轻拍患者肩膀，观察反应',
            '2. 呼叫救援：大声呼救，拨打急救电话',
            '3. 开放气道：仰头抬颌，保持气道通畅',
            '4. 胸外按压：',
            '   - 按压位置：胸骨下半部',
            '   - 按压深度：5-6厘米',
            '   - 按压频率：100-120次/分钟',
            '   - 按压次数：30次',
            '5. 人工呼吸：',
            '   - 每次吹气1秒',
            '   - 观察胸廓起伏',
            '   - 吹气次数：2次',
            '',
            '点击任意位置关闭说明'
        ];

        const text = this.add.text(window.innerWidth / 2, 100, tutorialText, {
            fontSize: '20px',
            fill: '#fff',
            align: 'left',
            wordWrap: { width: window.innerWidth - 200 },
            fontFamily: 'Press Start 2P',
            stroke: '#000',
            strokeThickness: 4
        }).setOrigin(0.5, 0);

        // 添加关闭按钮
        overlay.setInteractive();
        overlay.on('pointerdown', () => {
            overlay.destroy();
            text.destroy();
        });
    }

    setupInput() {
        // 设置按压区域
        const pressArea = this.add.rectangle(window.innerWidth / 2, window.innerHeight / 2, 200, 200, 0xffffff, 0.1);
        pressArea.setInteractive();
        pressArea.setDepth(1); // 设置为较高层级，确保可以接收点击事件
        this.pressArea = pressArea; // 保存引用以便后续控制
        
        // 添加按压区域提示
        this.pressHint = this.add.text(window.innerWidth / 2, window.innerHeight / 2 - 100, '点击此处开始检查', {
            fontSize: '20px',
            fill: '#fff',
            backgroundColor: '#000',
            padding: { x: 10, y: 5 },
            fontFamily: 'Press Start 2P',
            stroke: '#000',
            strokeThickness: 4
        }).setOrigin(0.5, 0.5);
        this.pressHint.setDepth(2); // 确保提示文本在最上层
        
        // 添加按压区域动画
        this.tweens.add({
            targets: pressArea,
            alpha: { from: 0.1, to: 0.3 },
            duration: 1000,
            yoyo: true,
            repeat: -1
        });
        
        pressArea.on('pointerdown', () => {
            switch (this.currentPhase) {
                case 'check':
                    this.startCheck();
                    break;
                case 'compression':
                    this.handleCompression();
                    break;
                case 'breath':
                    this.handleBreath();
                    break;
            }
        });
    }

    startCheck() {
        // 开始检查意识
        this.phaseText.setText('检查意识...');
        this.pressHint.setText('点击继续');
        
        // 添加淡入动画
        this.tweens.add({
            targets: this.patient,
            alpha: 1,
            duration: 1000,
            ease: 'Power2'
        });
        
        // 添加检查动画
        this.showCheckAnimation();
        
        // 延迟后显示选项
        this.time.delayedCall(2000, () => {
            this.showOptions('检查意识', [
                { text: '轻拍肩膀，观察反应', correct: true },
                { text: '用力摇晃患者', correct: false },
                { text: '大声喊叫', correct: false }
            ]);
        });
    }

    showCheckAnimation() {
        // 创建检查动画效果
        const checkEffect = this.add.circle(window.innerWidth / 2, window.innerHeight / 2, 0, 0xffffff, 0.5);
        
        this.tweens.add({
            targets: checkEffect,
            radius: 100,
            alpha: 0,
            duration: 1000,
            ease: 'Quad.easeOut',
            onComplete: () => {
                checkEffect.destroy();
            }
        });

        // 添加闪烁效果
        this.tweens.add({
            targets: this.patient,
            alpha: 0.5,
            duration: 500,
            yoyo: true,
            repeat: 1,
            ease: 'Sine.easeInOut'
        });

        // 添加面部表情变化
        this.updateFacialExpression('normal');
    }

    showPhaseTransition(phaseName) {
        // 创建过渡遮罩
        const mask = this.add.rectangle(window.innerWidth / 2, window.innerHeight / 2, 800, 600, 0x000000);
        mask.setAlpha(0);
        
        // 创建阶段名称文本
        const text = this.add.text(window.innerWidth / 2, 300, phaseName, {
            fontSize: '48px',
            fill: '#fff',
            backgroundColor: '#000',
            padding: { x: 20, y: 10 },
            fontFamily: 'Press Start 2P'
        }).setOrigin(0.5, 0.5);
        text.setAlpha(0);
        
        // 添加过渡动画
        this.tweens.add({
            targets: mask,
            alpha: 0.5,
            duration: 500,
            ease: 'Quad.easeOut',
            onComplete: () => {
                this.tweens.add({
                    targets: [mask, text],
                    alpha: 0,
                    duration: 500,
                    ease: 'Quad.easeIn',
                    onComplete: () => {
                        mask.destroy();
                        text.destroy();
                    }
                });
            }
        });
        
        this.tweens.add({
            targets: text,
            alpha: 1,
            duration: 500,
            ease: 'Quad.easeOut'
        });

        // 添加过渡粒子效果
        for (let i = 0; i < 30; i++) {
            const particle = this.add.circle(window.innerWidth / 2, 300, 2, 0xffffff);
            
            const angle = (i / 30) * Math.PI * 2;
            const distance = 100;
            
            this.tweens.add({
                targets: particle,
                x: window.innerWidth / 2 + Math.cos(angle) * distance,
                y: 300 + Math.sin(angle) * distance,
                alpha: 0,
                duration: 500,
                ease: 'Quad.easeOut',
                onComplete: () => {
                    particle.destroy();
                }
            });
        }
    }

    handleBreath() {
        this.breathCount++;
        this.phaseText.setText(`人工呼吸 (${this.breathCount}/2)`);
        
        // 添加人工呼吸动画
        this.showBreathAnimation();
        
        if (this.breathCount >= 2) {
            this.currentPhase = 'compression';
            this.phaseText.setText('胸外按压');
            this.pressHint.setText('点击此处进行按压');
            this.compressionCount = 0;
            this.countText.setText('按压次数: 0/30');
            this.breathCount = 0;
        }
    }

    showBreathAnimation() {
        // 创建呼吸效果
        const breathEffect = this.add.ellipse(window.innerWidth / 2, window.innerHeight / 2, 0, 0, 0x00ffff, 0.3);
        
        // 添加呼吸动画
        this.tweens.add({
            targets: breathEffect,
            width: 100,
            height: 50,
            alpha: 0,
            duration: 1000,
            ease: 'Quad.easeOut',
            onComplete: () => {
                breathEffect.destroy();
            }
        });

        // 添加胸廓起伏动画
        this.tweens.add({
            targets: this.patient.list[1], // body
            scaleX: 1.1,
            scaleY: 0.95,
            duration: 500,
            ease: 'Quad.easeOut',
            yoyo: true,
            onComplete: () => {
                this.patient.list[1].setScale(1, 1);
            }
        });

        // 添加头部后仰动画
        this.tweens.add({
            targets: this.patient,
            angle: 15,
            duration: 500,
            ease: 'Quad.easeOut',
            yoyo: true,
            onComplete: () => {
                this.patient.setAngle(0);
            }
        });

        // 添加手臂动画
        this.tweens.add({
            targets: [this.patient.list[3], this.patient.list[4]], // 手臂
            angle: -15, // 增加手臂角度变化
            duration: 500,
            ease: 'Quad.easeOut',
            yoyo: true,
            onComplete: () => {
                this.patient.list[3].setAngle(0);
                this.patient.list[4].setAngle(0);
            }
        });

        // 添加面部表情变化
        this.updateFacialExpression('breath');
    }

    setupAudio() {
        // 初始化音频上下文
        this.audioContext = new (window.AudioContext || window.webkitAudioContext)();
        
        // 设置节拍器定时器
        this.metronomeInterval = setInterval(() => {
            if (this.currentPhase === 'compression') {
                AudioGenerator.generateMetronome();
            }
        }, 600); // 100次/分钟
    }

    handleCompression() {
        const now = Date.now();
        const timeSinceLastCompression = now - this.lastCompressionTime;
        
        // 计算按压频率
        this.compressionRate = 60000 / timeSinceLastCompression;
        
        // 更新UI
        this.rateText.setText(`按压频率: ${Math.round(this.compressionRate)}/分钟`);
        this.countText.setText(`按压次数: ${this.compressionCount + 1}/30`);
        
        // 显示按压动画
        this.showCompressionAnimation();
        
        // 检查按压质量
        this.checkCompressionQuality();
        
        // 添加按压质量提示
        let qualityHint = '';
        if (this.compressionRate < 100) {
            qualityHint = '按压太慢';
        } else if (this.compressionRate > 120) {
            qualityHint = '按压太快';
        }

        if (qualityHint) {
            const hint = this.add.text(window.innerWidth / 2, window.innerHeight / 2 - 100, qualityHint, {
                fontSize: '24px',
                fill: '#ff0000',
                backgroundColor: '#000',
                padding: { x: 10, y: 5 },
                fontFamily: 'Press Start 2P'
            }).setOrigin(0.5, 0.5);

            this.time.delayedCall(1000, () => {
                hint.destroy();
            });
        }
        
        this.lastCompressionTime = now;
        this.compressionCount++;
    }

    checkCompressionQuality() {
        let qualityScore = 0;
        if (this.compressionRate >= 100 && this.compressionRate <= 120) {
            qualityScore += 1;
        }
        // 按压深度固定为5.5厘米，所以直接加1分
        qualityScore += 1;

        if (qualityScore === 2) {
            AudioGenerator.generateSuccess();
            this.score += 10;
            this.scoreText.setText(`得分: ${this.score}`);
            this.showSuccessEffect();
        } else {
            AudioGenerator.generateError();
            this.showErrorEffect();
        }
    }

    showCompressionAnimation() {
        // 显示手部和按压区域
        this.hands.setAlpha(1);
        this.compressionArea.setAlpha(0.3);
        
        // 创建按压动画
        this.tweens.add({
            targets: this.hands,
            y: 20, // 向下按压
            duration: 100,
            ease: 'Power2',
            onComplete: () => {
                // 添加按压效果
                this.createCompressionEffect();
                
                // 添加按压波纹效果
                this.createRippleEffect();
                
                // 添加按压粒子效果
                this.createCompressionParticles();
                
                // 添加身体压缩效果
                this.tweens.add({
                    targets: this.patient.list[1], // body
                    scaleY: 0.9,
                    duration: 100,
                    ease: 'Power2',
                    onComplete: () => {
                        this.tweens.add({
                            targets: this.patient.list[1],
                            scaleY: 1,
                            duration: 100,
                            ease: 'Power2'
                        });
                    }
                });

                // 添加面部表情变化
                this.updateFacialExpression('compression');
                
                // 添加手臂动画
                this.tweens.add({
                    targets: [this.patient.list[3], this.patient.list[4]], // 手臂
                    angle: 15, // 增加手臂角度变化
                    duration: 100,
                    ease: 'Power2',
                    yoyo: true,
                    onComplete: () => {
                        this.patient.list[3].setAngle(0);
                        this.patient.list[4].setAngle(0);
                    }
                });
                
                // 添加头部动画
                this.tweens.add({
                    targets: this.patient.list[0], // 头部
                    y: -75,
                    duration: 100,
                    ease: 'Power2',
                    yoyo: true,
                    onComplete: () => {
                        this.patient.list[0].setY(-80);
                    }
                });
                
                this.tweens.add({
                    targets: this.hands,
                    y: 0, // 回到原位
                    duration: 100,
                    ease: 'Power2',
                    onComplete: () => {
                        this.hands.setAlpha(0);
                        this.compressionArea.setAlpha(0);
                    }
                });
            }
        });
    }

    showCompressionDepth() {
        // 创建按压深度指示线
        const depthLine = this.add.line(window.innerWidth / 2, window.innerHeight / 2, window.innerWidth / 2, window.innerHeight / 2 - this.compressionDepth * 10, 0xff0000);
        depthLine.setAlpha(0.5);
        
        // 添加深度指示线动画
        this.tweens.add({
            targets: depthLine,
            alpha: 0,
            duration: 300,
            ease: 'Quad.easeOut',
            onComplete: () => {
                depthLine.destroy();
            }
        });
    }

    createCompressionEffect() {
        // 创建按压波纹效果
        const ripple = this.add.circle(window.innerWidth / 2, window.innerHeight / 2, 0, 0xffffff, 0.5);
        
        // 创建按压深度指示环
        const depthRing = this.add.circle(window.innerWidth / 2, window.innerHeight / 2, 0, 0xff0000, 0.3);
        
        this.tweens.add({
            targets: [ripple, depthRing],
            radius: 50,
            alpha: 0,
            duration: 300,
            ease: 'Quad.easeOut',
            onComplete: () => {
                ripple.destroy();
                depthRing.destroy();
            }
        });
    }

    createRippleEffect() {
        // 创建多层波纹效果
        for (let i = 0; i < 3; i++) {
            const ripple = this.add.circle(window.innerWidth / 2, window.innerHeight / 2, 0, 0xffffff, 0.5);
            
            this.tweens.add({
                targets: ripple,
                radius: 50 + i * 20,
                alpha: 0,
                duration: 300 + i * 100,
                ease: 'Quad.easeOut',
                onComplete: () => {
                    ripple.destroy();
                }
            });
        }
    }

    createCompressionParticles() {
        // 创建按压粒子效果
        for (let i = 0; i < 10; i++) {
            const particle = this.add.circle(window.innerWidth / 2, window.innerHeight / 2, 2, 0xffffff);
            
            const angle = (i / 10) * Math.PI * 2;
            const distance = 30;
            
            this.tweens.add({
                targets: particle,
                x: window.innerWidth / 2 + Math.cos(angle) * distance,
                y: window.innerHeight / 2 + Math.sin(angle) * distance,
                alpha: 0,
                duration: 300,
                ease: 'Quad.easeOut',
                onComplete: () => {
                    particle.destroy();
                }
            });
        }
    }

    showSuccessEffect() {
        // 创建成功光环
        const successRing = this.add.circle(window.innerWidth / 2, window.innerHeight / 2, 0, 0x00ff00, 0.5);
        
        this.tweens.add({
            targets: successRing,
            radius: 100,
            alpha: 0,
            duration: 500,
            ease: 'Quad.easeOut',
            onComplete: () => {
                successRing.destroy();
            }
        });

        // 添加成功粒子效果
        for (let i = 0; i < 20; i++) {
            const particle = this.add.circle(window.innerWidth / 2, window.innerHeight / 2, 3, 0x00ff00);
            
            const angle = (i / 20) * Math.PI * 2;
            const distance = 100;
            
            this.tweens.add({
                targets: particle,
                x: window.innerWidth / 2 + Math.cos(angle) * distance,
                y: window.innerHeight / 2 + Math.sin(angle) * distance,
                alpha: 0,
                duration: 500,
                ease: 'Quad.easeOut',
                onComplete: () => {
                    particle.destroy();
                }
            });
        }

        // 添加闪光效果
        const flash = this.add.rectangle(window.innerWidth / 2, window.innerHeight / 2, 800, 600, 0x00ff00);
        flash.setAlpha(0);
        
        this.tweens.add({
            targets: flash,
            alpha: 0.2,
            duration: 100,
            ease: 'Quad.easeOut',
            onComplete: () => {
                this.tweens.add({
                    targets: flash,
                    alpha: 0,
                    duration: 100,
                    ease: 'Quad.easeIn',
                    onComplete: () => {
                        flash.destroy();
                    }
                });
            }
        });
    }

    showErrorEffect() {
        // 创建错误光环
        const errorRing = this.add.circle(window.innerWidth / 2, window.innerHeight / 2, 0, 0xff0000, 0.5);
        
        this.tweens.add({
            targets: errorRing,
            radius: 100,
            alpha: 0,
            duration: 500,
            ease: 'Quad.easeOut',
            onComplete: () => {
                errorRing.destroy();
            }
        });

        // 添加震动效果
        this.tweens.add({
            targets: this.patient,
            x: window.innerWidth / 2 + 5,
            duration: 50,
            yoyo: true,
            repeat: 3,
            ease: 'Sine.easeInOut',
            onComplete: () => {
                this.patient.x = window.innerWidth / 2;
            }
        });

        // 添加错误粒子效果
        for (let i = 0; i < 15; i++) {
            const particle = this.add.circle(window.innerWidth / 2, window.innerHeight / 2, 2, 0xff0000);
            
            const angle = (i / 15) * Math.PI * 2;
            const distance = 50;
            
            this.tweens.add({
                targets: particle,
                x: window.innerWidth / 2 + Math.cos(angle) * distance,
                y: window.innerHeight / 2 + Math.sin(angle) * distance,
                alpha: 0,
                duration: 300,
                ease: 'Quad.easeOut',
                onComplete: () => {
                    particle.destroy();
                }
            });
        }

        // 添加红色闪烁效果
        const flash = this.add.rectangle(window.innerWidth / 2, window.innerHeight / 2, 800, 600, 0xff0000);
        flash.setAlpha(0);
        
        this.tweens.add({
            targets: flash,
            alpha: 0.1,
            duration: 100,
            ease: 'Quad.easeOut',
            onComplete: () => {
                this.tweens.add({
                    targets: flash,
                    alpha: 0,
                    duration: 100,
                    ease: 'Quad.easeIn',
                    onComplete: () => {
                        flash.destroy();
                    }
                });
            }
        });
    }

    update() {
        // 更新游戏状态
        this.updatePhase();
    }

    updatePhase() {
        switch (this.currentPhase) {
            case 'compression':
                if (this.compressionCount >= 30) {
                    this.currentPhase = 'breath';
                    this.phaseText.setText('人工呼吸');
                    this.pressHint.setText('点击此处进行人工呼吸');
                }
                break;
            case 'breath':
                if (this.breathCount >= 2) {
                    this.currentPhase = 'compression';
                    this.phaseText.setText('胸外按压');
                    this.pressHint.setText('点击此处进行按压');
                    this.compressionCount = 0;
                    this.countText.setText('按压次数: 0/30');
                    this.breathCount = 0;
                }
                break;
        }

        // 检查是否完成一轮CPR（30次按压+2次呼吸）
        if (this.compressionCount >= 30 && this.breathCount >= 2) {
            this.gameOver();
        }
    }

    resetGame() {
        this.compressionCount = 0;
        this.breathCount = 0;
        this.currentPhase = 'check';
        this.lastCompressionTime = 0;
        this.compressionRate = 0;
        this.score = 0;
        this.isGameOver = false;

        // 重置UI
        this.phaseText.setText('检查意识');
        this.pressHint.setText('点击此处开始检查');
        this.countText.setText('按压次数: 0/30');
        this.rateText.setText('按压频率: 0/分钟');
        this.scoreText.setText('得分: 0');
        this.resetButton.setAlpha(0);
        this.optionsContainer.setAlpha(0);
    }

    gameOver() {
        this.isGameOver = true;
        this.phaseText.setText('训练完成');
        this.pressHint.setText('点击重新开始按钮重新训练');
        this.resetButton.setAlpha(1);
        
        // 添加完成动画
        this.tweens.add({
            targets: this.patient,
            scale: 1.2,
            duration: 1000,
            ease: 'Power2'
        });
        
        // 显示最终得分和评价
        let evaluation = '';
        if (this.score >= 80) {
            evaluation = '优秀';
        } else if (this.score >= 60) {
            evaluation = '良好';
        } else if (this.score >= 40) {
            evaluation = '及格';
        } else {
            evaluation = '需要继续练习';
        }
        
        const resultText = this.add.text(window.innerWidth / 2, window.innerHeight / 2, `最终得分: ${this.score}\n评价: ${evaluation}`, {
            fontSize: '32px',
            fill: '#fff',
            backgroundColor: '#000',
            padding: { x: 20, y: 10 }
        }).setOrigin(0.5, 0.5);
        
        // 添加结果文本动画
        resultText.setAlpha(0);
        this.tweens.add({
            targets: resultText,
            alpha: 1,
            duration: 1000,
            ease: 'Power2'
        });
    }

    shutdown() {
        // 清理音频资源
        if (this.metronomeInterval) {
            clearInterval(this.metronomeInterval);
        }
        if (this.audioContext) {
            this.audioContext.close();
        }
    }

    updateFacialExpression(type) {
        const face = this.add.graphics();
        face.lineStyle(2, 0x000000);
        
        switch(type) {
            case 'breath':
                // 呼吸时的表情
                face.moveTo(-10, -85);
                face.lineTo(10, -85);
                face.moveTo(-15, -110);
                face.lineTo(-5, -110);
                face.moveTo(5, -110);
                face.lineTo(15, -110);
                break;
            case 'compression':
                // 按压时的表情
                face.moveTo(-10, -85);
                face.lineTo(10, -85);
                face.moveTo(-15, -110);
                face.lineTo(-5, -110);
                face.moveTo(5, -110);
                face.lineTo(15, -110);
                face.moveTo(-20, -115);
                face.lineTo(-10, -118);
                face.moveTo(10, -118);
                face.lineTo(20, -115);
                break;
            case 'pain':
                // 痛苦的表情
                face.moveTo(-10, -85);
                face.lineTo(10, -85);
                face.moveTo(-15, -110);
                face.lineTo(-5, -110);
                face.moveTo(5, -110);
                face.lineTo(15, -110);
                face.moveTo(-20, -115);
                face.lineTo(-10, -118);
                face.moveTo(10, -118);
                face.lineTo(20, -115);
                break;
            case 'normal':
                // 正常表情
                face.moveTo(-10, -85);
                face.lineTo(10, -85);
                face.moveTo(-15, -110);
                face.lineTo(-5, -110);
                face.moveTo(5, -110);
                face.lineTo(15, -110);
                break;
        }
        
        this.patient.add(face);
        
        // 延迟后恢复正常表情
        this.time.delayedCall(500, () => {
            face.destroy();
            this.updateFacialExpression('normal');
        });
    }

    showOptions(phase, options) {
        // 清除现有选项
        this.optionsContainer.removeAll(true);
        
        // 设置选项容器位置和深度
        this.optionsContainer.setPosition(window.innerWidth / 2, window.innerHeight / 2);
        this.optionsContainer.setAlpha(1);
        this.optionsContainer.setDepth(9999);
        
        // 隐藏按压区域
        if (this.pressArea) {
            this.pressArea.setAlpha(0);
        }
        
        // 创建选项按钮
        options.forEach((option, index) => {
            const y = -30 + index * 140; // 增加选项间距
            
            // 添加情况说明文本
            const description = this.add.text(0, y - 50, this.getDescription(phase, index), {
                fontSize: '32px',
                fill: '#FFFFFF',
                fontFamily: 'Press Start 2P',
                stroke: '#000000',
                strokeThickness: 6,
                align: 'center',
                wordWrap: { width: 600 }
            }).setOrigin(0.5, 0.5);
            
            // 创建可点击区域
            const hitArea = this.add.rectangle(0, y, 700, 100, 0x2C3E50);
            hitArea.setOrigin(0.5, 0.5);
            hitArea.setInteractive();
            
            // 添加选项文本
            const text = this.add.text(0, y, option.text, {
                fontSize: '44px',
                fill: '#FFFFFF',
                fontFamily: 'Press Start 2P',
                stroke: '#000000',
                strokeThickness: 8
            }).setOrigin(0.5, 0.5);
            
            // 添加悬停效果
            hitArea.on('pointerover', () => {
                hitArea.setFillStyle(0x34495E);
                this.tweens.add({
                    targets: hitArea,
                    scaleX: 1.02,
                    scaleY: 1.02,
                    duration: 100,
                    ease: 'Power2'
                });
            });
            
            hitArea.on('pointerout', () => {
                hitArea.setFillStyle(0x2C3E50);
                this.tweens.add({
                    targets: hitArea,
                    scaleX: 1,
                    scaleY: 1,
                    duration: 100,
                    ease: 'Power2'
                });
            });
            
            // 添加点击事件
            hitArea.on('pointerdown', () => {
                this.tweens.add({
                    targets: hitArea,
                    scaleX: 0.98,
                    scaleY: 0.98,
                    duration: 50,
                    ease: 'Power2',
                    onComplete: () => {
                        this.tweens.add({
                            targets: hitArea,
                            scaleX: 1,
                            scaleY: 1,
                            duration: 50,
                            ease: 'Power2'
                        });
                        this.handleOptionSelect(option);
                    }
                });
            });
            
            // 将按钮和文本添加到容器
            this.optionsContainer.add([description, hitArea, text]);
        });
    }

    getDescription(phase, index) {
        switch(phase) {
            case 'check':
                switch(index) {
                    case 0: return '患者没有反应，需要轻拍肩膀并观察';
                    case 1: return '用力摇晃可能会加重患者伤势';
                    case 2: return '大声喊叫可能会影响周围环境';
                    default: return '';
                }
            case 'call':
                switch(index) {
                    case 0: return '大声呼救可以吸引周围人的注意，拨打120是必要的';
                    case 1: return '等待他人发现会延误救援时间';
                    case 2: return '拍照发朋友圈会浪费宝贵的救援时间';
                    default: return '';
                }
            case 'airway':
                switch(index) {
                    case 0: return '仰头抬颌法可以保持气道通畅';
                    case 1: return '侧头法可能会影响气道开放';
                    case 2: return '低头法会阻塞气道';
                    default: return '';
                }
            default:
                return '';
        }
    }

    handleOptionSelect(selectedOption) {
        // 检查选择是否正确
        const isCorrect = this.checkAnswer(selectedOption);
        
        if (isCorrect) {
            // 播放成功音效
            if (this.sounds && this.sounds.success) {
                this.sounds.success.play();
            }
            
            // 显示成功效果
            this.showSuccessEffect();
            
            // 增加分数
            this.score += 10;
            this.scoreText.setText(`得分: ${this.score}`);
            
            // 延迟后进入下一阶段
            this.time.delayedCall(1000, () => {
                this.nextPhase();
            });
        } else {
            // 播放错误音效
            if (this.sounds && this.sounds.error) {
                this.sounds.error.play();
            }
            
            // 显示错误效果
            this.showErrorEffect();
            
            // 显示错误提示
            const hint = this.add.text(window.innerWidth / 2, window.innerHeight / 2 - 100, '选择错误，请重试', {
                fontSize: '24px',
                fill: '#ff0000',
                backgroundColor: '#000',
                padding: { x: 15, y: 10 },
                fontFamily: 'Press Start 2P',
                stroke: '#000',
                strokeThickness: 4
            }).setOrigin(0.5, 0.5);
            
            // 延迟后移除提示
            this.time.delayedCall(2000, () => {
                hint.destroy();
            });
        }
    }

    checkAnswer(selectedOption) {
        return selectedOption.correct;
    }

    nextPhase() {
        // 隐藏选项
        this.optionsContainer.setAlpha(0);
        
        // 根据当前阶段进入下一步
        switch(this.currentPhase) {
            case 'check':
                this.currentPhase = 'call';
                this.phaseText.setText('呼叫救援');
                this.pressHint.setText('点击继续');
                // 显示按压区域并添加动画
                if (this.pressArea) {
                    this.pressArea.setAlpha(0.1);
                    this.pressArea.setDepth(1); // 恢复按压区域的深度
                    this.tweens.add({
                        targets: this.pressArea,
                        alpha: 0.3,
                        duration: 1000,
                        yoyo: true,
                        repeat: -1
                    });
                }
                this.time.delayedCall(1000, () => {
                    this.showOptions('呼叫救援', [
                        { text: '大声呼救，拨打120', correct: true },
                        { text: '等待他人发现', correct: false },
                        { text: '先拍照发朋友圈', correct: false }
                    ]);
                });
                break;
            case 'call':
                this.currentPhase = 'airway';
                this.phaseText.setText('开放气道');
                this.pressHint.setText('点击继续');
                // 恢复按压区域的深度
                if (this.pressArea) {
                    this.pressArea.setDepth(1);
                }
                this.time.delayedCall(1000, () => {
                    this.showOptions('开放气道', [
                        { text: '仰头抬颌法', correct: true },
                        { text: '侧头法', correct: false },
                        { text: '低头法', correct: false }
                    ]);
                });
                break;
            case 'airway':
                this.currentPhase = 'compression';
                this.phaseText.setText('胸外按压');
                this.pressHint.setText('点击此处进行按压');
                this.compressionCount = 0;
                this.countText.setText('按压次数: 0/30');
                // 显示按压区域并恢复深度
                if (this.pressArea) {
                    this.pressArea.setAlpha(0.1);
                    this.pressArea.setDepth(1);
                }
                break;
        }
    }
} 